AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda with Inline Source (Python) 3.9

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  LambdaExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          Resource:
          - '*'
      Roles:
      - !Ref LambdaExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Basic Lambda Python"
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          databaseName: lambdadb
          databaseUser: admin
      Code:
        ZipFile: |
            import json
            import boto3
            import os

            def handler(event, context):
                result = "???";
                try:
                  result = event['key1'] + os.environ['databaseName'];
                except Exception as e:
                    print(f'Got Exception: {e}')
                return result
      TracingConfig:
        Mode: "Active"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 1

Outputs:

  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn


